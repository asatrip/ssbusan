const path = require('path');
const axios = require('axios').default;
const Class = require('./class');
const cache = require('./cache');

class Setting extends Class {
  async get () {
    const [settings, ] = await this.conn.query(`SELECT * FROM setting ORDER BY id DESC LIMIT 1`);
    if (settings.length) {
      const setting = settings[0];
      return setting;
    } else {
      return null;
    }
  }
  async set () {
    cache.setting = await this.get();
    cache.favicon = this.setFavicon(cache.setting.faviconImage);
  }
  async create (data) {
    data = Object.assign({
      id: null,
      hash: null,
      siteName: null,
      siteNameRaw: null,
    }, data);
    const {
      id,
      hash,
      siteName,
      siteNameRaw,
    } = data;
    const query = `INSERT INTO setting
    (hash, siteName, siteNameRaw)
    VALUES (?, ?, ?)`;
    await this.conn.query(query, [
      hash,
      siteName,
      siteNameRaw,
    ]);
  }
  async update (data) {
    const setting = await this.get();
    data = Object.assign({
      siteNameRaw: setting.siteNameRaw,
      siteName: setting.siteName,
      siteDescription: setting.siteDescription,
      siteKeywords: setting.siteKeywords,
      siteDomain: setting.siteDomain,
      emailService: setting.emailService,
      gmailUser: setting.gmailUser,
      gmailPassword: setting.gmailPassword,
      logoType: setting.logoType,
      logoImage: setting.logoImage,
      logoImageDarkMode: setting.logoImageDarkMode,
      logoImageDesktopSize: setting.logoImageDesktopSize,
      logoImageMobileSize: setting.logoImageMobileSize,
      faviconImage: setting.faviconImage,
      ogImage: setting.ogImage,
      index: setting.index,
      font: setting.font,
      theme: setting.theme,
      mainTemplate: setting.mainTemplate,
      headerTemplate: setting.headerTemplate,
      footerTemplate: setting.footerTemplate,
      indexTemplate: setting.indexTemplate,
      boardTheme: setting.boardTheme,
      license: setting.license,
      headerFontColor: setting.headerFontColor,
      headerBackgroundColor: setting.headerBackgroundColor,
      bodyFontColor: setting.bodyFontColor,
      bodyBackgroundColor: setting.bodyBackgroundColor,
      pointColor: setting.pointColor,
      pointBackgroundColor: setting.pointBackgroundColor,
      headerDesign: setting.headerDesign,
      footerDesign: setting.footerDesign,
      indexH1: setting.indexH1,
      indexH2: setting.indexH2,
      desktopBannerRowsHeader: setting.desktopBannerRowsHeader,
      desktopBannerRowsIndexTop: setting.desktopBannerRowsIndexTop,
      desktopBannerRowsIndexBottom: setting.desktopBannerRowsIndexBottom,
      desktopBannerRowsSideTop: setting.desktopBannerRowsSideTop,
      desktopBannerRowsSideBottom: setting.desktopBannerRowsSideBottom,
      desktopBannerRowsArticleTop: setting.desktopBannerRowsArticleTop,
      desktopBannerRowsArticleBottom: setting.desktopBannerRowsArticleBottom,
      desktopBannerRowsCustom: setting.desktopBannerRowsCustom,
      mobileBannerRowsHeader: setting.mobileBannerRowsHeader,
      mobileBannerRowsIndexTop: setting.mobileBannerRowsIndexTop,
      mobileBannerRowsIndexBottom: setting.mobileBannerRowsIndexBottom,
      mobileBannerRowsSideTop: setting.mobileBannerRowsSideTop,
      mobileBannerRowsSideBottom: setting.mobileBannerRowsSideBottom,
      mobileBannerRowsArticleTop: setting.mobileBannerRowsArticleTop,
      mobileBannerRowsArticleBottom: setting.mobileBannerRowsArticleBottom,
      mobileBannerRowsCustom: setting.mobileBannerRowsCustom,
      bannerAlignHeader: setting.bannerAlignHeader,
      bannerAlignIndexTop: setting.bannerAlignIndexTop,
      bannerAlignIndexBottom: setting.bannerAlignIndexBottom,
      bannerAlignSideTop: setting.bannerAlignSideTop,
      bannerAlignSideBottom: setting.bannerAlignSideBottom,
      bannerAlignArticleTop: setting.bannerAlignArticleTop,
      bannerAlignArticleBottom: setting.bannerAlignArticleBottom,
      bannerAlignLeftWing: setting.bannerAlignLeftWing,
      bannerAlignRightWing: setting.bannerAlignRightWing,
      bannerAlignCustom: setting.bannerAlignCustom,
      bannerGapDesktop: setting.bannerGapDesktop,
      bannerGapMobile: setting.bannerGapMobile,
      bannerBorderRounding: setting.bannerBorderRounding,
      bannerFollow: setting.bannerFollow,
      boardPrevNextArticle: setting.boardPrevNextArticle,
      boardAllArticle: setting.boardAllArticle,
      boardAuthorArticle: setting.boardAuthorArticle,
      writingTerm: setting.writingTerm,
      customHeadTags: setting.customHeadTags,
      customHeaderTags: setting.customHeaderTags,
      customFooterTags: setting.customFooterTags,
      terms: setting.terms,
      privacy: setting.privacy,
      adsenseIndexTop: setting.adsenseIndexTop,
      adsenseIndexBottom: setting.adsenseIndexBottom,
      adsenseSide: setting.adsenseSide,
      adsenseCustom: setting.adsenseCustom,
      adsenseArticleTop: setting.adsenseArticleTop,
      adsenseArticleBottom: setting.adsenseArticleBottom,
      adsenseArticleCenter: setting.adsenseArticleCenter,
      adsenseAds: setting.adsenseAds,
      blockWords: setting.blockWords,
      useJoinPhone: setting.useJoinPhone,
      useJoinRealName: setting.useJoinRealName,
      useCheckComments: setting.useCheckComments,
      checkComments: setting.checkComments,
      useSocialApple: setting.useSocialApple,
      useSocialGoogle: setting.useSocialGoogle,
      useSocialFacebook: setting.useSocialFacebook,
      useSocialTwitter: setting.useSocialTwitter,
      useSocialNaver: setting.useSocialNaver,
      useSocialKakao: setting.useSocialKakao,
      socialAppleServiceId: setting.socialAppleServiceId,
      socialAppleTeamId: setting.socialAppleTeamId,
      socialAppleKeyId: setting.socialAppleKeyId,
      socialAppleAuthKey: setting.socialAppleAuthKey,
      socialGoogleClientId: setting.socialGoogleClientId,
      socialGoogleClientSecret: setting.socialGoogleClientSecret,
      socialFacebookAppId: setting.socialFacebookAppId,
      socialFacebookAppSecret: setting.socialFacebookAppSecret,
      socialTwitterApiKey: setting.socialTwitterApiKey,
      socialTwitterApiSecret: setting.socialTwitterApiSecret,
      socialNaverClientId: setting.socialNaverClientId,
      socialNaverClientSecret: setting.socialNaverClientSecret,
      socialKakaoClientId: setting.socialKakaoClientId,
      socialKakaoClientSecret: setting.socialKakaoClientSecret,
      smsCallerId: setting.smsCallerId,
      smsServiceId: setting.smsServiceId,
      smsServiceSecretKey: setting.smsServiceSecretKey,
      telegramToken: setting.telegramToken,
      telegramChatId: setting.telegramChatId,
      naverCloudPlatformAccessKeyId: setting.naverCloudPlatformAccessKeyId,
      naverCloudPlatformSecretKey: setting.naverCloudPlatformSecretKey,
      googleCloudPlatformApiKey: setting.googleCloudPlatformApiKey,
      kakaoJavascriptKey: setting.kakaoJavascriptKey,
      pointWithdrawLimit: setting.pointWithdrawLimit,
      checkPoint: setting.checkPoint,
      joinPoint: setting.joinPoint,
      invitePoint: setting.invitePoint,
      reportCount: setting.reportCount,
      authorLikePoint: setting.authorLikePoint,
      userLikePoint: setting.userLikePoint,
      articlePointLimit: setting.articlePointLimit,
      commentPointLimit: setting.commentPointLimit,
      authorLikePointLimit: setting.authorLikePointLimit,
      userLikePointLimit: setting.userLikePointLimit,
      freePointTerm: setting.freePointTerm,
      freePoint: setting.freePoint,
      bestViewCount: setting.bestViewCount,
      bestLikeCount: setting.bestLikeCount,
      useTermsAndPrivacy: setting.useTermsAndPrivacy,
      useAutoPermission: setting.useAutoPermission,
      autoPermissionType: setting.autoPermissionType,
      useManagerArticle: setting.useManagerArticle,
      useEmailAuthentication: setting.useEmailAuthentication,
      useSmsAuthentication: setting.useSmsAuthentication,
      useArticleViewCount: setting.useArticleViewCount,
      useVisitCount: setting.useVisitCount,
      useMessage: setting.useMessage,
      useJoin: setting.useJoin,
      useChat: setting.useChat,
      useSms: setting.useSms,
      usePermissionImage: setting.usePermissionImage,
      useWithdraw: setting.useWithdraw,
      withdrawType: setting.withdrawType,
      useWorkingUser: setting.useWorkingUser,
      usePointWithdraw: setting.usePointWithdraw,
      parsingServer: setting.parsingServer,
    }, data);
    const {
      siteNameRaw,
      siteName,
      siteDescription,
      siteKeywords,
      siteDomain,
      emailService,
      gmailUser,
      gmailPassword,
      logoType,
      logoImage,
      logoImageDarkMode,
      logoImageDesktopSize,
      logoImageMobileSize,
      faviconImage,
      ogImage,
      index,
      font,
      theme,
      mainTemplate,
      headerTemplate,
      footerTemplate,
      indexTemplate,
      boardTheme,
      license,
      headerFontColor,
      headerBackgroundColor,
      bodyFontColor,
      bodyBackgroundColor,
      pointColor,
      pointBackgroundColor,
      headerDesign,
      footerDesign,
      indexH1,
      indexH2,
      desktopBannerRowsHeader,
      desktopBannerRowsIndexTop,
      desktopBannerRowsIndexBottom,
      desktopBannerRowsSideTop,
      desktopBannerRowsSideBottom,
      desktopBannerRowsArticleTop,
      desktopBannerRowsArticleBottom,
      desktopBannerRowsCustom,
      mobileBannerRowsHeader,
      mobileBannerRowsIndexTop,
      mobileBannerRowsIndexBottom,
      mobileBannerRowsSideTop,
      mobileBannerRowsSideBottom,
      mobileBannerRowsArticleTop,
      mobileBannerRowsArticleBottom,
      mobileBannerRowsCustom,
      bannerAlignHeader,
      bannerAlignIndexTop,
      bannerAlignIndexBottom,
      bannerAlignSideTop,
      bannerAlignSideBottom,
      bannerAlignArticleTop,
      bannerAlignArticleBottom,
      bannerAlignLeftWing,
      bannerAlignRightWing,
      bannerAlignCustom,
      bannerGapDesktop,
      bannerGapMobile,
      bannerBorderRounding,
      bannerFollow,
      boardPrevNextArticle,
      boardAllArticle,
      boardAuthorArticle,
      writingTerm,
      customHeadTags,
      customHeaderTags,
      customFooterTags,
      terms,
      privacy,
      adsenseIndexTop,
      adsenseIndexBottom,
      adsenseSide,
      adsenseCustom,
      adsenseArticleTop,
      adsenseArticleBottom,
      adsenseArticleCenter,
      adsenseAds,
      blockWords,
      useJoinPhone,
      useJoinRealName,
      useCheckComments,
      checkComments,
      useSocialApple,
      useSocialGoogle,
      useSocialFacebook,
      useSocialTwitter,
      useSocialNaver,
      useSocialKakao,
      socialAppleServiceId,
      socialAppleTeamId,
      socialAppleKeyId,
      socialAppleAuthKey,
      socialGoogleClientId,
      socialGoogleClientSecret,
      socialFacebookAppId,
      socialFacebookAppSecret,
      socialTwitterApiKey,
      socialTwitterApiSecret,
      socialNaverClientId,
      socialNaverClientSecret,
      socialKakaoClientId,
      socialKakaoClientSecret,
      smsCallerId,
      smsServiceId,
      smsServiceSecretKey,
      telegramToken,
      telegramChatId,
      naverCloudPlatformAccessKeyId,
      naverCloudPlatformSecretKey,
      googleCloudPlatformApiKey,
      kakaoJavascriptKey,
      pointWithdrawLimit,
      checkPoint,
      joinPoint,
      invitePoint,
      reportCount,
      authorLikePoint,
      userLikePoint,
      articlePointLimit,
      commentPointLimit,
      authorLikePointLimit,
      userLikePointLimit,
      freePointTerm,
      freePoint,
      bestViewCount,
      bestLikeCount,
      useTermsAndPrivacy,
      useAutoPermission,
      autoPermissionType,
      useManagerArticle,
      useEmailAuthentication,
      useSmsAuthentication,
      useArticleViewCount,
      useVisitCount,
      useMessage,
      useJoin,
      useChat,
      useSms,
      usePermissionImage,
      useWithdraw,
      withdrawType,
      useWorkingUser,
      usePointWithdraw,
      parsingServer,
    } = data;
    if (siteDomain !== setting.siteDomain) this.domainCheck({
      hash: setting.hash,
      domain: siteDomain,
    });
    if (logoImage && !logoImageDarkMode) {
      logoImageDarkMode = logoImage;
    }
    if (logoImageDarkMode && !logoImage) {
      logoImage = logoImageDarkMode;
    }
    const query = `UPDATE setting
    SET
    siteNameRaw = ?,
    siteName = ?,
    siteDescription = ?,
    siteKeywords = ?,
    siteDomain = ?,
    emailService = ?,
    gmailUser = ?,
    gmailPassword = ?,
    logoType = ?,
    logoImage = ?,
    logoImageDarkMode = ?,
    logoImageDesktopSize = ?,
    logoImageMobileSize = ?,
    faviconImage = ?,
    ogImage = ?,
    \`index\` = ?,
    font = ?,
    theme = ?,
    mainTemplate = ?,
    headerTemplate = ?,
    footerTemplate = ?,
    indexTemplate = ?,
    boardTheme = ?,
    license = ?,
    headerFontColor = ?,
    headerBackgroundColor = ?,
    bodyFontColor = ?,
    bodyBackgroundColor = ?,
    pointColor = ?,
    pointBackgroundColor = ?,
    headerDesign = ?,
    footerDesign = ?,
    indexH1 = ?,
    indexH2 = ?,
    desktopBannerRowsHeader = ?,
    desktopBannerRowsIndexTop = ?,
    desktopBannerRowsIndexBottom = ?,
    desktopBannerRowsSideTop = ?,
    desktopBannerRowsSideBottom = ?,
    desktopBannerRowsArticleTop = ?,
    desktopBannerRowsArticleBottom = ?,
    desktopBannerRowsCustom = ?,
    mobileBannerRowsHeader = ?,
    mobileBannerRowsIndexTop = ?,
    mobileBannerRowsIndexBottom = ?,
    mobileBannerRowsSideTop = ?,
    mobileBannerRowsSideBottom = ?,
    mobileBannerRowsArticleTop = ?,
    mobileBannerRowsArticleBottom = ?,
    mobileBannerRowsCustom = ?,
    bannerAlignHeader = ?,
    bannerAlignIndexTop = ?,
    bannerAlignIndexBottom = ?,
    bannerAlignSideTop = ?,
    bannerAlignSideBottom = ?,
    bannerAlignArticleTop = ?,
    bannerAlignArticleBottom = ?,
    bannerAlignLeftWing = ?,
    bannerAlignRightWing = ?,
    bannerAlignCustom = ?,
    bannerGapDesktop = ?,
    bannerGapMobile = ?,
    bannerBorderRounding = ?,
    bannerFollow = ?,
    boardPrevNextArticle = ?,
    boardAllArticle = ?,
    boardAuthorArticle = ?,
    writingTerm = ?,
    customHeadTags = ?,
    customHeaderTags = ?,
    customFooterTags = ?,
    terms = ?,
    privacy = ?,
    adsenseIndexTop = ?,
    adsenseIndexBottom = ?,
    adsenseSide = ?,
    adsenseCustom = ?,
    adsenseArticleTop = ?,
    adsenseArticleBottom = ?,
    adsenseArticleCenter = ?,
    adsenseAds = ?,
    blockWords = ?,
    useJoinPhone = ?,
    useJoinRealName = ?,
    useCheckComments = ?,
    checkComments = ?,
    useSocialApple = ?,
    useSocialGoogle = ?,
    useSocialFacebook = ?,
    useSocialTwitter = ?,
    useSocialNaver = ?,
    useSocialKakao = ?,
    socialAppleServiceId = ?,
    socialAppleTeamId = ?,
    socialAppleKeyId = ?,
    socialAppleAuthKey = ?,
    socialGoogleClientId = ?,
    socialGoogleClientSecret = ?,
    socialFacebookAppId = ?,
    socialFacebookAppSecret = ?,
    socialTwitterApiKey = ?,
    socialTwitterApiSecret = ?,
    socialNaverClientId = ?,
    socialNaverClientSecret = ?,
    socialKakaoClientId = ?,
    socialKakaoClientSecret = ?,
    smsCallerId = ?,
    smsServiceId = ?,
    smsServiceSecretKey = ?,
    telegramToken = ?,
    telegramChatId = ?,
    naverCloudPlatformAccessKeyId = ?,
    naverCloudPlatformSecretKey = ?,
    googleCloudPlatformApiKey = ?,
    kakaoJavascriptKey = ?,
    pointWithdrawLimit = ?,
    checkPoint = ?,
    joinPoint = ?,
    invitePoint = ?,
    reportCount = ?,
    authorLikePoint = ?,
    userLikePoint = ?,
    articlePointLimit = ?,
    commentPointLimit = ?,
    authorLikePointLimit = ?,
    userLikePointLimit = ?,
    freePointTerm = ?,
    freePoint = ?,
    bestViewCount = ?,
    bestLikeCount = ?,
    useTermsAndPrivacy = ?,
    useAutoPermission = ?,
    autoPermissionType = ?,
    useManagerArticle = ?,
    useEmailAuthentication = ?,
    useSmsAuthentication = ?,
    useArticleViewCount = ?,
    useVisitCount = ?,
    useMessage = ?,
    useJoin = ?,
    useChat = ?,
    useSms = ?,
    usePermissionImage = ?,
    useWithdraw = ?,
    withdrawType = ?,
    useWorkingUser = ?,
    usePointWithdraw = ?,
    parsingServer = ?
    WHERE id = ?`;
    const [result, ] = await this.conn.query(query, [
      siteNameRaw,
      siteName,
      siteDescription,
      siteKeywords,
      siteDomain,
      emailService,
      gmailUser,
      gmailPassword,
      logoType,
      logoImage,
      logoImageDarkMode,
      logoImageDesktopSize,
      logoImageMobileSize,
      faviconImage,
      ogImage,
      index,
      font,
      theme,
      mainTemplate,
      headerTemplate,
      footerTemplate,
      indexTemplate,
      boardTheme,
      license || 0,
      headerFontColor,
      headerBackgroundColor,
      bodyFontColor,
      bodyBackgroundColor,
      pointColor,
      pointBackgroundColor,
      headerDesign,
      footerDesign,
      indexH1,
      indexH2,
      desktopBannerRowsHeader,
      desktopBannerRowsIndexTop,
      desktopBannerRowsIndexBottom,
      desktopBannerRowsSideTop,
      desktopBannerRowsSideBottom,
      desktopBannerRowsArticleTop,
      desktopBannerRowsArticleBottom,
      desktopBannerRowsCustom,
      mobileBannerRowsHeader,
      mobileBannerRowsIndexTop,
      mobileBannerRowsIndexBottom,
      mobileBannerRowsSideTop,
      mobileBannerRowsSideBottom,
      mobileBannerRowsArticleTop,
      mobileBannerRowsArticleBottom,
      mobileBannerRowsCustom,
      bannerAlignHeader,
      bannerAlignIndexTop,
      bannerAlignIndexBottom,
      bannerAlignSideTop,
      bannerAlignSideBottom,
      bannerAlignArticleTop,
      bannerAlignArticleBottom,
      bannerAlignLeftWing,
      bannerAlignRightWing,
      bannerAlignCustom,
      bannerGapDesktop,
      bannerGapMobile,
      bannerBorderRounding,
      bannerFollow,
      boardPrevNextArticle,
      boardAllArticle,
      boardAuthorArticle,
      writingTerm,
      customHeadTags,
      customHeaderTags,
      customFooterTags,
      terms,
      privacy,
      adsenseIndexTop,
      adsenseIndexBottom,
      adsenseSide,
      adsenseCustom,
      adsenseArticleTop,
      adsenseArticleBottom,
      adsenseArticleCenter,
      adsenseAds,
      blockWords,
      useJoinPhone,
      useJoinRealName,
      useCheckComments,
      checkComments,
      useSocialApple,
      useSocialGoogle,
      useSocialFacebook,
      useSocialTwitter,
      useSocialNaver,
      useSocialKakao,
      socialAppleServiceId,
      socialAppleTeamId,
      socialAppleKeyId,
      socialAppleAuthKey,
      socialGoogleClientId,
      socialGoogleClientSecret,
      socialFacebookAppId,
      socialFacebookAppSecret,
      socialTwitterApiKey,
      socialTwitterApiSecret,
      socialNaverClientId,
      socialNaverClientSecret,
      socialKakaoClientId,
      socialKakaoClientSecret,
      smsCallerId,
      smsServiceId,
      smsServiceSecretKey,
      telegramToken,
      telegramChatId,
      naverCloudPlatformAccessKeyId,
      naverCloudPlatformSecretKey,
      googleCloudPlatformApiKey,
      kakaoJavascriptKey,
      pointWithdrawLimit,
      checkPoint,
      joinPoint,
      invitePoint,
      reportCount,
      authorLikePoint,
      userLikePoint,
      articlePointLimit,
      commentPointLimit,
      authorLikePointLimit,
      userLikePointLimit,
      freePointTerm,
      freePoint,
      bestViewCount,
      bestLikeCount,
      useTermsAndPrivacy,
      useAutoPermission,
      autoPermissionType,
      useManagerArticle,
      useEmailAuthentication,
      useSmsAuthentication,
      useArticleViewCount,
      useVisitCount,
      useMessage,
      useJoin,
      useChat,
      useSms,
      usePermissionImage,
      useWithdraw,
      withdrawType,
      useWorkingUser,
      usePointWithdraw,
      parsingServer,
      setting.id,
    ]);
    if (result.affectedRows) {
      await this.set();
      return true;
    } else {
      throw new Error('설정값 수정에 실패하였습니다');
    }
  }
  setFavicon (faviconImage) {
    if (faviconImage) {
      const extension = path.extname(faviconImage);
      const fileName = faviconImage.replace(extension, '');
      let type = null;
      if (extension === '.png') {
        type = 'image/png';
      } else if (extension === '.jpg') {
        type = 'image/jpeg';
      }
      return {
        fileName,
        extension,
        type,
      };
    } else {
      return null;
    }
  }
  async domainCheck (data) {
    data = Object.assign({
      hash: null,
      domain: null,
    }, data);
    const {
      hash,
      domain,
    } = data;
    axios({
      method: 'POST',
      url: 'https://kbike.kr/license/check',
      data: {
        hash,
        domain,
      },
    }).then(res => {

    }).catch(err => {
      // console.error(err);
    });
  }
}

module.exports = Setting;